{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "**Creación de arreglos:**\n",
        "\n",
        "Ejercicio: Crea un arreglo de 10 elementos con valores enteros aleatorios entre 0 y 50"
      ],
      "metadata": {
        "id": "PTsNL00xPWPX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "arr = np.random.randint(0, 51, 10)\n",
        "print(arr)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r3ieHbVEPddw",
        "outputId": "4de2d88a-3db2-4046-bd3a-8714dafe7a02"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 3 33 21 33  7  9  4 21 20  3]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Operaciones element-wise:**\n",
        "\n",
        "Ejercicio: Realiza las siguientes operaciones en el arreglo generado en el ejercicio anterior:\n",
        "\n",
        "1.   Multiplica cada elemento por 2.\n",
        "2.   Suma 5 a cada elemento.\n",
        "3. Divide cada elemento por 3.\n"
      ],
      "metadata": {
        "id": "oHIfX3VqPoj_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "arr = np.random.randint(0, 51, 10)\n",
        "print(\"Original:\", arr)\n",
        "print(\"Multiplicado por 2:\", arr * 2)\n",
        "print(\"Suma de 5:\", arr + 5)\n",
        "print(\"División por 3:\", arr / 3)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-xT0Q7ntP26b",
        "outputId": "dedd1938-1719-4102-c1cd-3f5224f68279"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original: [50 20 30 22  6 16 44  8 21 41]\n",
            "Multiplicado por 2: [100  40  60  44  12  32  88  16  42  82]\n",
            "Suma de 5: [55 25 35 27 11 21 49 13 26 46]\n",
            "División por 3: [16.66666667  6.66666667 10.          7.33333333  2.          5.33333333\n",
            " 14.66666667  2.66666667  7.         13.66666667]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Índices y segmentación:**\n",
        "\n",
        "Ejercicio: Crea un arreglo de 20 números enteros del 1 al 100. Luego, extrae:\n",
        "1. Los primeros 5 elementos.\n",
        "2. Los últimos 5 elementos.\n",
        "3. Los elementos en posiciones pares."
      ],
      "metadata": {
        "id": "Jrb3eKo-P7lx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "arr = np.random.randint(1, 101, 20)\n",
        "print(\"Original:\", arr)\n",
        "print(\"Primeros 5 elementos:\", arr[:5])\n",
        "print(\"Últimos 5 elementos:\", arr[-5:])\n",
        "print(\"Elementos en posiciones pares:\", arr[::2])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UrP2lg1lQDsx",
        "outputId": "2f7b25cd-5b1b-432e-9768-88b983b393c5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original: [ 52  54  40  33  61  25  72  45  56  23  80   7  36  47  99   2  81  13\n",
            "  71 100]\n",
            "Primeros 5 elementos: [52 54 40 33 61]\n",
            "Últimos 5 elementos: [  2  81  13  71 100]\n",
            "Elementos en posiciones pares: [52 40 61 72 56 80 36 99 81 71]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Cálculo de estadísticas:**\n",
        "Ejercicio: Crea un arreglo de 50 números aleatorios entre 0 y 100. Luego, calcula:\n",
        ".\n",
        "1. La media.\n",
        "2. La mediana.\n",
        "3. La desviación estándar."
      ],
      "metadata": {
        "id": "t7Z80xCqQNFc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "arr = np.random.randint(0, 101, 50)\n",
        "print(\"Media:\", np.mean(arr))\n",
        "print(\"Mediana:\", np.median(arr))\n",
        "print(\"Desviación estándar:\", np.std(arr))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KTArjI4JQTiu",
        "outputId": "05c23282-ee32-4de0-e573-ed0b07d03314"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Media: 52.6\n",
            "Mediana: 57.0\n",
            "Desviación estándar: 27.453232960800808\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Operaciones con matrices:**\n",
        "\n",
        "Ejercicio: Crea dos matrices de 3x3 con números aleatorios. Luego:\n",
        "1. Suma las dos matrices.\n",
        "2. Realiza una multiplicación matricial."
      ],
      "metadata": {
        "id": "DezHzhp7QXUn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "A = np.random.randint(1, 10, (3, 3))\n",
        "B = np.random.randint(1, 10, (3, 3))\n",
        "print(\"Matriz A:\", A)\n",
        "print(\"Matriz B:\", B)\n",
        "print(\"Suma de matrices:\", A + B)\n",
        "print(\"Multiplicación matricial:\", np.dot(A, B))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tTLXyGt2RZNf",
        "outputId": "17178538-f821-427b-c7d4-af5323e3d7b2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Matriz A: [[8 4 4]\n",
            " [3 5 3]\n",
            " [4 6 9]]\n",
            "Matriz B: [[6 2 2]\n",
            " [9 5 1]\n",
            " [6 5 3]]\n",
            "Suma de matrices: [[14  6  6]\n",
            " [12 10  4]\n",
            " [10 11 12]]\n",
            "Multiplicación matricial: [[108  56  32]\n",
            " [ 81  46  20]\n",
            " [132  83  41]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Máscaras booleanas:**\n",
        "\n",
        "Ejercicio: Crea un arreglo de 10 números aleatorios entre 1 y 100. Luego, usa una máscara booleana para seleccionar los elementos mayores que 50."
      ],
      "metadata": {
        "id": "p7wEzutrRbvn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "arr = np.random.randint(1, 101, 10)\n",
        "print(\"Original:\", arr)\n",
        "mask = arr > 50\n",
        "print(\"Elementos mayores que 50:\", arr[mask])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e4ivq2YxTTxo",
        "outputId": "5a64870a-061d-4f28-bb71-540bd4171123"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original: [76 28  8 39 10 57 26 59 20 33]\n",
            "Elementos mayores que 50: [76 57 59]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " **Reshape y redimensionamiento:**\n",
        "\n",
        "Ejercicio: Crea un arreglo unidimensional con 12 elementos. Luego, redimensionalo a una matriz de 3x4."
      ],
      "metadata": {
        "id": "JLPQnt1BT3Gn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "arr = np.arange(1, 13)\n",
        "print(\"Arreglo original:\", arr)\n",
        "arr_reshape = arr.reshape(3, 4)\n",
        "print(\"Matriz 3x4:\", arr_reshape)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cIfy7ZHiT53Q",
        "outputId": "bce7b9c0-250b-4353-c6b2-18e88d4a0814"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Arreglo original: [ 1  2  3  4  5  6  7  8  9 10 11 12]\n",
            "Matriz 3x4: [[ 1  2  3  4]\n",
            " [ 5  6  7  8]\n",
            " [ 9 10 11 12]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Concatenación y apilamiento de arreglos:**\n",
        "\n",
        "Ejercicio: Crea dos arreglos unidimensionales de 5 elementos. Concátalos y apílalos verticalmente."
      ],
      "metadata": {
        "id": "xi05BbfHT8qa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "arr1 = np.array([1, 2, 3, 4, 5])\n",
        "arr2 = np.array([6, 7, 8, 9, 10])\n",
        "print(\"Concatenación horizontal:\", np.concatenate((arr1, arr2)))\n",
        "print(\"Apilamiento vertical:\", np.vstack((arr1, arr2)))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lnhj9z90UA2D",
        "outputId": "e7372b73-61ca-477d-9ab9-49f3dab6fb29"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Concatenación horizontal: [ 1  2  3  4  5  6  7  8  9 10]\n",
            "Apilamiento vertical: [[ 1  2  3  4  5]\n",
            " [ 6  7  8  9 10]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Manejo de valores NaN (Not a Number):**\n",
        "\n",
        "Ejercicio: Crea un arreglo de 5 elementos con valores NaN y reemplázalos por el valor 0"
      ],
      "metadata": {
        "id": "cPeY4TxwUDQy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "arr = np.array([1, 2, np.nan, 4, np.nan])\n",
        "print(\"Original con NaN:\", arr)\n",
        "arr[np.isnan(arr)] = 0\n",
        "print(\"Sin NaN:\", arr)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gH8y4fXMUINJ",
        "outputId": "38cedf95-888b-40aa-bc50-2f7cbb0f5885"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original con NaN: [ 1.  2. nan  4. nan]\n",
            "Sin NaN: [1. 2. 0. 4. 0.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Generación de números aleatorios más compleja:**\n",
        "\n",
        "Ejercicio: Crea una matriz 3x3 con números aleatorios provenientes de una distribución normal con media 0 y desviación estándar 1."
      ],
      "metadata": {
        "id": "Rl-xNkKYUK6c"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "arr = np.random.normal(0, 1, (3, 3))\n",
        "print(\"Matriz con distribución normal:\", arr)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BWMVwFz5WkhJ",
        "outputId": "0ce7b7c9-69e5-4ddd-d056-dc0c624b4e2d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Matriz con distribución normal: [[-0.15133665  0.35187185  1.57973182]\n",
            " [ 0.6117532  -1.50716077 -0.68869558]\n",
            " [ 1.40235171 -1.34922262 -1.36960932]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Funciones universales (ufuncs):**\n",
        "\n",
        "Ejercicio: Aplica funciones matemáticas a un arreglo, como el seno, coseno o logaritmo natural"
      ],
      "metadata": {
        "id": "qcUnfgxHWn2A"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "arr = np.array([0, np.pi/2, np.pi])\n",
        "print(\"Seno de los elementos:\", np.sin(arr))\n",
        "print(\"Coseno de los elementos:\", np.cos(arr))\n",
        "print(\"Logaritmo natural de los elementos:\", np.log(arr))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W-yPy9CAWuw3",
        "outputId": "c26a63bf-7a74-4efd-a638-7a96c9d36cc4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Seno de los elementos: [0.0000000e+00 1.0000000e+00 1.2246468e-16]\n",
            "Coseno de los elementos: [ 1.000000e+00  6.123234e-17 -1.000000e+00]\n",
            "Logaritmo natural de los elementos: [      -inf 0.45158271 1.14472989]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-11-96fa36a54ab8>:4: RuntimeWarning: divide by zero encountered in log\n",
            "  print(\"Logaritmo natural de los elementos:\", np.log(arr))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Suma acumulativa y producto acumulativo:**\n",
        "\n",
        "Ejercicio: Crea un arreglo y calcula la suma y el producto acumulativo de los elementos."
      ],
      "metadata": {
        "id": "6zyjcX3SXRlf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "arr = np.array([1, 2, 3, 4])\n",
        "print(\"Suma acumulativa:\", np.cumsum(arr))\n",
        "print(\"Producto acumulativo:\", np.cumprod(arr))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oYAuLq4pXYeu",
        "outputId": "0839419e-dc42-4bf4-e373-870c8c66daa4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Suma acumulativa: [ 1  3  6 10]\n",
            "Producto acumulativo: [ 1  2  6 24]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Reducción de dimensiones (suma, media, etc. en matrices):\n",
        "\n",
        "Ejercicio: Crea una matriz 3x3 y calcula la suma de los elementos por columna y por fila"
      ],
      "metadata": {
        "id": "-T1MEK2jXbyX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "arr = np.random.randint(1, 10, (3, 3))\n",
        "print(\"Matriz original:\", arr)\n",
        "print(\"Suma por columna:\", np.sum(arr, axis=0))\n",
        "print(\"Suma por fila:\", np.sum(arr, axis=1))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N6nEbECpXrw-",
        "outputId": "ea785d26-e362-4c24-b7fb-24d52feecf0e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Matriz original: [[1 4 2]\n",
            " [2 6 6]\n",
            " [3 7 5]]\n",
            "Suma por columna: [ 6 17 13]\n",
            "Suma por fila: [ 7 14 15]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "** Cálculo de la inversa de una matriz:**\n",
        "\n",
        "Ejercicio: Crea una matriz de 2x2 invertible y calcula su inversa"
      ],
      "metadata": {
        "id": "lBN1r5L-ZP6u"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "A = np.array([[1, 2], [3, 4]])\n",
        "print(\"Matriz A:\", A)\n",
        "A_inv = np.linalg.inv(A)\n",
        "print(\"Inversa de A:\", A_inv)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DKqRXDmIZSEy",
        "outputId": "d08ea76c-a2b8-4d0d-fffc-d4082fbcef6c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Matriz A: [[1 2]\n",
            " [3 4]]\n",
            "Inversa de A: [[-2.   1. ]\n",
            " [ 1.5 -0.5]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Transposición de matrices:**\n",
        "\n",
        "Ejercicio: Crea una matriz 2x3 y luego realiza la transposición de la misma."
      ],
      "metadata": {
        "id": "DpTjtvgxaC2_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "arr = np.array([[1, 2, 3], [4, 5, 6]])\n",
        "print(\"Matriz original:\", arr)\n",
        "print(\"Matriz transpuesta:\", arr.T)\n"
      ],
      "metadata": {
        "id": "m10Bgm84aFx4",
        "outputId": "e8554acc-0b30-4348-f7ad-c7e42a21a4a9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Matriz original: [[1 2 3]\n",
            " [4 5 6]]\n",
            "Matriz transpuesta: [[1 4]\n",
            " [2 5]\n",
            " [3 6]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Indexación avanzada (usando np.ix_):**\n",
        "\n",
        "Ejercicio: Usa la función np.ix_ para realizar una indexación avanzada y extraer submatrices."
      ],
      "metadata": {
        "id": "HoUDTyP7X651"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "arr = np.random.randint(1, 10, (4, 4))\n",
        "print(\"Matriz original:\", arr)\n",
        "row_indices = np.array([0, 2])\n",
        "col_indices = np.array([1, 3])\n",
        "print(\"Submatriz usando np.ix_:\", arr[np.ix_(row_indices, col_indices)])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n16ouvgvX8iv",
        "outputId": "8889902c-6b62-4afd-875a-b5492bbcb3e1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Matriz original: [[8 3 7 4]\n",
            " [6 2 5 6]\n",
            " [5 6 4 4]\n",
            " [3 3 9 3]]\n",
            "Submatriz usando np.ix_: [[3 4]\n",
            " [6 4]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Resolución de sistemas de ecuaciones lineales:\n",
        "\n",
        "Ejercicio: Usa np.linalg.solve para resolver un sistema de ecuaciones lineales"
      ],
      "metadata": {
        "id": "MS4OE5euYgSp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Resolver el sistema Ax = b\n",
        "A = np.array([[3, 1], [1, 2]])\n",
        "b = np.array([9, 8])\n",
        "x = np.linalg.solve(A, b)\n",
        "print(\"Solución del sistema:\", x)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "po_Li7heYh7V",
        "outputId": "36c2c126-40a2-46af-c9a6-f1227cb77d6f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Solución del sistema: [2. 3.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Uso de np.unique:**\n",
        "\n",
        "Ejercicio: Crea un arreglo con algunos elementos repetidos y usa np.unique para obtener los elementos únicos."
      ],
      "metadata": {
        "id": "LicjGR3cYmxF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "arr = np.array([1, 2, 2, 3, 4, 4, 5])\n",
        "print(\"Elementos únicos:\", np.unique(arr))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iQFrZoKRYmfU",
        "outputId": "cc200d19-ac9b-45fb-d74d-1efcaeb05efb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Elementos únicos: [1 2 3 4 5]\n"
          ]
        }
      ]
    }
  ]
}
